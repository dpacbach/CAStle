DONE *** Create a "shared array" class.  This is essentially a class that manages
an reference-counted, fixed-size array (but whose size is not known
at compile time) which is allocated on the heap and whose reference
count is allocated in the same block of memory as the array elements.
This should remove one level of heap indirection from BaseArray.

DONE *** Try to upgrade to a 64bit unit_t

DONE *** Next put in some move semantics if they're not already being used by default
         Doesn't seem to do very much.

DONE *** Put the exception throwing behind guards

DONE *** Next try some specialization for small BaseArrays, maybe one or
two long, possible with a union.  This should remove all heap interaction
for small BaseArrays.  Try to distinguish between BaseArrays which are
known to be small at compiler time versus only at runtime.

DONE *** Didn't have any effect. Try putting in a custom allocator for the shared_array

DONE*** Next try to decrease the memory footprint of the BaseArray, maybe with packing
        tried bit fields, didn't seem to do anything

DONE*** Next try getting rid of the finalized flag, maybe try using some const stuff
        for safety checking.

Make sure member variables are in the right order and that there is no
unnecessary point dereferencing.

Next try to rework Integer implementation to avoid copying as much as
possible.

Try using the reference count in base array to verify finalization in debug
mode
